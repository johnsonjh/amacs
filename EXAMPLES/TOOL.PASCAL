{-*- Mode: Pascal -*-}Function TrackButton (theButton: Buttype):boolean;{track a mouse-down in a button}  var MPoint  :point;		{current mouse position}      invert,			{state of button inversion}      tbool   :boolean;		{temporary var for same}  begin    InvertRect (theButton.butrect);    invert := true;		{start with button pressed in inverted}    while stilldown do      begin	getmouse (MPoint);	tbool := PtInRect (MPoint, theButton.butrect);	if not (invert = tbool) then {the state has changed, so invert it}	  InvertRect (theButton.butrect);	invert := tbool;      end;			{until the mouse button is released}    ShowButton (theButton);	{draw button without hiliting}    trackbut := invert;		{return PtInRect for mouse, button-rect}  end;Procedure ReadClick (Time :longint; Place :point);{Set the value of DblClick to true or false based upon whether or not the previous mouse click is within 1/2 second of this mouse click, and if the mouse position has not changed within 3 pixels vertically or horizontally of the last click location.}  var   temp: boolean;		{for triple clicks} begin   temp := DblClick;		{remember previous double click state}   DblClick := ((Time - LastMClik < 30 ) and	       ((abs (LastMPos.v-Place.v) < 3) and		(abs (LastMPos.h-Place.h) < 3)));   TriClick := (DblClick and temp);   if TriClick then DblClick := false;   LastMPos := place;   LastMClik := Time; end;