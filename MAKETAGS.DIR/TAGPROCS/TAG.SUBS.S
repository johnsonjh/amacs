;-*- Mode: Merlin -*-;;File    :TAG.SUBS;Author  :Brian Fox;Address :119 Hawthorne Street;         Chelsea, MA. 02150;Phone   :(617) 884-5454;; This file is the sole property of Brian Fox, and; his associated company, Creative Thinking, INC.;; This file may not be reproduced in any way or; fashion, without the explicit written permission; of Brian Fox.;; This file contains valuable trade secrets used by; Creative Thinking, INC., in the production and; manufacture of its products, and as such is protected; under the copyright laws of this state.;; Copyright 1985, Brian Fox; Copyright 1985, Creative Thinking, INC.;;Return = $8DSpace = $A0Tab = $89;MaxTokenLen = 64  ;why the fuck not.;; Some useful parsing subroutines for people who write their; own tag processors. ;LineIndex ent   ;index into the line buffer. dfb $00;Token ent   ;the last parsed token. ds MaxTokenLen;NextToken ent   ;retreive the next token from LineBuff.; ldx LineIndex dex ldy #$00;:getbeg inx   ;find start of the next token. cpx LineBuff beq :chkwht bcs :gottok ;past end of buffer.;:chkwht lda LineBuff,x jsr WhiteSpace? beq :getbeg ;..:gettok cmp #Return beq :gottok; iny sta Token,y cpy #MaxTokenLen bcs :gottok cpx LineBuff ;at or past last character? bcs :gottok ;yes. inx lda LineBuff,x jsr WhiteSpace? bne :gettok;:gottok sty Token ;remember length of this token. stx LineIndex rts;CompareToken ent   ;compare the string in temp against Token.; ldy #$00;:length lda (temp),y cmp Token,y bne :exit ;lengths aren't the same, not equ.; tay:comp lda (temp),y jsr UpperCon sta :char lda Token,y jsr UpperCon cmp :char bne :exit dey bne :comp:exit rts:char dfb $00;MoveToken ent   ;move the current token to (temp).; ldy Token:loop lda Token,y sta (temp),y dey bpl :loop rts;CRWhiteSpace? ent   ;t if a-reg is <CR> or whitespace.; ora #$80 cmp #Return bne WhiteSpace? rts;WhiteSpace? ent   ;return t if a-reg is whitespace.; ora #$80 cmp #Space beq :exit cmp #Tab:exit rts;UpperCon ent   ;convert a-reg to upper-case.; ora #$80 cmp #"a" bcc :exit cmp #"z"+1 bcs :exit and #$DF:exit rts;AlphaChar? ent   ;t if a-reg is alphabetic character.; sta :char jsr UpperCon cmp #"A" bcc :exit ;no. cmp #"Z"+1 bcs :false lda #$00 beq :exit:false lda #$FF:exit php lda :char plp rts:char dfb $00;